// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: hoardherd.proto

package com.zklapow.hoardherd.proto

final case class GetRequest (
	`group`: String = "",
	`key`: String = ""
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[GetRequest]
	with net.sandrogrzicic.scalabuff.Parser[GetRequest] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeString(1, `group`)
		output.writeString(2, `key`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeStringSize(1, `group`)
		__size += computeStringSize(2, `key`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): GetRequest = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __group: String = ""
		var __key: String = ""

		def __newMerged = GetRequest(
			__group,
			__key
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __group = in.readString()
			case 18 => __key = in.readString()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: GetRequest) = {
		GetRequest(
			m.`group`,
			m.`key`
		)
	}

	def getDefaultInstanceForType = GetRequest.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object GetRequest {
	@reflect.BeanProperty val defaultInstance = new GetRequest()

	def parseFrom(data: Array[Byte]): GetRequest = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): GetRequest = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): GetRequest = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): GetRequest = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[GetRequest] = defaultInstance.mergeDelimitedFromStream(stream)

	val GROUP_FIELD_NUMBER = 1
	val KEY_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: GetRequest) = defaultInstance.mergeFrom(prototype)

}
final case class GetResponse (
	`value`: Option[com.google.protobuf.ByteString] = None,
	`minuteQps`: Option[Double] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[GetResponse]
	with net.sandrogrzicic.scalabuff.Parser[GetResponse] {

	def setValue(_f: com.google.protobuf.ByteString) = copy(`value` = Some(_f))
	def setMinuteQps(_f: Double) = copy(`minuteQps` = Some(_f))

	def clearValue = copy(`value` = None)
	def clearMinuteQps = copy(`minuteQps` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		if (`value`.isDefined) output.writeBytes(1, `value`.get)
		if (`minuteQps`.isDefined) output.writeDouble(2, `minuteQps`.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		if (`value`.isDefined) __size += computeBytesSize(1, `value`.get)
		if (`minuteQps`.isDefined) __size += computeDoubleSize(2, `minuteQps`.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): GetResponse = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __value: Option[com.google.protobuf.ByteString] = `value`
		var __minuteQps: Option[Double] = `minuteQps`

		def __newMerged = GetResponse(
			__value,
			__minuteQps
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __value = Some(in.readBytes())
			case 17 => __minuteQps = Some(in.readDouble())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: GetResponse) = {
		GetResponse(
			m.`value`.orElse(`value`),
			m.`minuteQps`.orElse(`minuteQps`)
		)
	}

	def getDefaultInstanceForType = GetResponse.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = "ScalaBuff JSON generation not enabled. Use --generate_json_method to enable."
}

object GetResponse {
	@reflect.BeanProperty val defaultInstance = new GetResponse()

	def parseFrom(data: Array[Byte]): GetResponse = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): GetResponse = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): GetResponse = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): GetResponse = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[GetResponse] = defaultInstance.mergeDelimitedFromStream(stream)

	val VALUE_FIELD_NUMBER = 1
	val MINUTE_QPS_FIELD_NUMBER = 2

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: GetResponse) = defaultInstance.mergeFrom(prototype)

}

object HoardHerdProtos {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "GetRequest" -> (bytes ⇒ GetRequest.parseFrom(bytes)),
		 "GetResponse" -> (bytes ⇒ GetResponse.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}
